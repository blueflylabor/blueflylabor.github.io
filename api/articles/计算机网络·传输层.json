{"title":"计算机网络·传输层","slug":"计算机网络·传输层","date":"2023-09-11T04:01:51.000Z","updated":"2024-06-30T07:40:05.414Z","comments":false,"path":"api/articles/计算机网络·传输层.json","photos":[],"excerpt":"","covers":null,"content":"<h1 id=\"传输层\"><a href=\"#传输层\" class=\"headerlink\" title=\"传输层\"></a>传输层</h1><ul>\n<li>功能概述<ul>\n<li>提供应用进程间的逻辑通信</li>\n<li>复用和分用<ul>\n<li>复用<ul>\n<li>发送方不同的应用进程使用同一个传输层协议</li>\n</ul>\n</li>\n<li>分用<ul>\n<li>接收方的传输层在剥去报文首部后能把这些数据正确交付至目的应用进程</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>差错检测（首部和数据部分）</li>\n<li>TCP和UDP</li>\n</ul>\n</li>\n<li>寻址与端口<ul>\n<li>端口作用<ul>\n<li>让应用层各应用程序将其数据通过端口向下交付给传输层</li>\n<li>让传输层知道应当将其报文段中的数据向上通过端口交付给应用层相应的进程</li>\n</ul>\n</li>\n<li>端口号<ul>\n<li>长度16bit $2^{16}&#x3D;65536$个不同的端口号</li>\n<li>端口划分<ul>\n<li><p>服务器端使用</p>\n<ul>\n<li>熟知端口<ul>\n<li>0 ~ 1023</li>\n<li>FTP<ul>\n<li>21</li>\n</ul>\n</li>\n<li>TELNET<ul>\n<li>23</li>\n</ul>\n</li>\n<li>SMTP<ul>\n<li>25</li>\n</ul>\n</li>\n<li>DNS<ul>\n<li>53</li>\n</ul>\n</li>\n<li>TFTP<ul>\n<li>69</li>\n</ul>\n</li>\n<li>HTTP<ul>\n<li>80</li>\n</ul>\n</li>\n<li>SNMP<ul>\n<li>161</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>登记端口<ul>\n<li>1024 ~ 49151</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>客户端使用</p>\n<ul>\n<li>客户进程运行时动态选择</li>\n<li>又称临时端口</li>\n</ul>\n</li>\n<li><p>套接字</p>\n<ul>\n<li>端口和IP拼接</li>\n<li>Socket &#x3D; (IP地址:端口号)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>UDP<ul>\n<li>概述<ul>\n<li>在IP数据报基础上增加<ul>\n<li>复用</li>\n<li>分用</li>\n<li>差错检测</li>\n</ul>\n</li>\n<li>无需建立连接</li>\n<li>无连接状态</li>\n<li>分组首部开销小</li>\n<li>不保证可靠交付</li>\n<li>面向报文</li>\n<li>IP协议字段17</li>\n<li>报文长度由发送程序决定</li>\n</ul>\n</li>\n<li>首部格式<ul>\n<li>8B 4字段构成<ul>\n<li>源端口<ul>\n<li>需要对方回信时选用</li>\n<li>不需要可用全0</li>\n</ul>\n</li>\n<li>目的端口<ul>\n<li>终点交付报文时必须使用</li>\n</ul>\n</li>\n<li>长度<ul>\n<li>最小值8（仅首部）</li>\n</ul>\n</li>\n<li>校验和<ul>\n<li>检测UDP数据报传输过程是否有错</li>\n<li>有错丢弃</li>\n<li>源主机不想计算校验和填写全0</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>校验<ul>\n<li>计算校验和在UDP数据报前增加12B伪首部</li>\n<li>伪首部不是UDP真正首部只用于计算校验和</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>TCP<ul>\n<li>概述<ul>\n<li>面向连接</li>\n<li>可靠交付</li>\n<li>全双工通信<ul>\n<li>允许双方任何时候都能发送数据</li>\n<li>两端设有缓存暂存数据<ul>\n<li>发送缓存    <ul>\n<li>发送程序传给发送方TCP准备的数据</li>\n<li>TCP已发送尚未收到确认的数据</li>\n</ul>\n</li>\n<li>接收缓存<ul>\n<li>按序到达但尚未被接收程序读取的数据</li>\n<li>不按序到达的数据</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>面向字节流<ul>\n<li>仅视为一连串无结构的字节流</li>\n</ul>\n</li>\n<li>报文长度由接受方给出的窗口值和当前网络拥塞程度决定</li>\n</ul>\n</li>\n<li>报文段<ul>\n<li>源端口和目的端口<ul>\n<li>2B + 2B</li>\n</ul>\n</li>\n<li>序号<ul>\n<li>4B</li>\n<li>0 ~ $2^{32}-1$</li>\n<li>面向字节流</li>\n<li>TCP连接传送的字节流的每个字节都按顺序编号</li>\n<li>本报文段发送的数据的第一个字节的序号</li>\n</ul>\n</li>\n<li>确认号<ul>\n<li>4B</li>\n<li>期望收到对方下一报文段的第一个数据字节的序号</li>\n<li>确认号为N表明到序号N-1为止的所有数据都已正确收到</li>\n</ul>\n</li>\n<li>数据偏移<ul>\n<li>表示首部长度</li>\n<li>指出TCP报文段的数据起始处距离TCP报文段的起始处有多远</li>\n</ul>\n</li>\n<li>保留<ul>\n<li>占6位</li>\n<li>今后使用</li>\n<li>目前置0</li>\n</ul>\n</li>\n<li>紧急位URG<ul>\n<li>URG&#x3D;1<ul>\n<li>表明紧急指针字段有效</li>\n<li>应尽快传送</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>确认位ACK<ul>\n<li>ACK&#x3D;1<ul>\n<li>确认号字段才有效</li>\n</ul>\n</li>\n<li>ACK&#x3D;0<ul>\n<li>确认号无效</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>推送位PSH<ul>\n<li>接收方TCP收到PSH&#x3D;1的报文段</li>\n<li>尽快交付给接收应用进程</li>\n<li>不等到缓存满在交付</li>\n</ul>\n</li>\n<li>复位位RST<ul>\n<li>RST&#x3D;1<ul>\n<li>表明TCP连接中出现严重错误</li>\n<li>必须释放链接</li>\n<li>重新建立连接</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>同步位SYN<ul>\n<li>SYN&#x3D;1表明这是一个连接请求或连接接受报文</li>\n<li>SYN&#x3D;1 ACK&#x3D;0表明这是一个连接请求报文<br>  对方同意建立连接<br>  则响应报文中使用SYN&#x3D;1 ACK&#x3D;1</li>\n</ul>\n</li>\n<li>终止位FIN<ul>\n<li>用来释放一个连接</li>\n<li>FIN&#x3D;1 表明此报文段的发送方的数据已经发送完毕</li>\n<li>并要求释放运输链接</li>\n</ul>\n</li>\n<li>窗口<ul>\n<li>2B</li>\n<li>$2^{16}-1$</li>\n<li>现在允许对方发送的数据量</li>\n<li>设确认号为701 窗口字段1000<ul>\n<li>从701起发送此报文段的一方<br>  还有接受1000字节数据的接受缓存空间<br>  701~1700</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>校验和<ul>\n<li>2B</li>\n<li>校验和字段检验的范围包括首部和数据两部分</li>\n<li>计算校验和<ul>\n<li>报文段前加入12B伪首部</li>\n<li>协议字段6</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>紧急指针<ul>\n<li>2B</li>\n<li>URG&#x3D;1有意义</li>\n<li>指出在本报文段中紧急数据共多少字节</li>\n</ul>\n</li>\n<li>选项<ul>\n<li>长度可变</li>\n<li>最大报文段长度MSS<ul>\n<li>TCP报文段的数据字段最大长度</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>填充<ul>\n<li>为了使整个首部长度为4B的整数倍</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>连接管理<ul>\n<li>三阶段<ul>\n<li>连接建立</li>\n<li>数据传输</li>\n<li>连接释放</li>\n</ul>\n</li>\n<li>客户&#x2F;服务器模式</li>\n<li>连接建立<ul>\n<li>三次握手</li>\n<li>建立前 服务器进程进入LISTEN 等待客户连接请求</li>\n<li>客户机TCP首先向服务器TCP发送请求报文段<ul>\n<li>SYN&#x3D;1 seq&#x3D;x</li>\n<li>SYN报文段不能携带数据</li>\n<li>消耗一个序号</li>\n<li>客户机进入SYN-SENT</li>\n</ul>\n</li>\n<li>服务器TCP收到连接请求报文段同意连接<ul>\n<li>发回确认报文段并配置该TCP缓存和变量</li>\n<li>SYN&#x3D;1 ACK&#x3D;1 seq&#x3D;y ack&#x3D;x+1</li>\n<li>确认报文段不能携带数据</li>\n<li>消耗一个序号</li>\n<li>服务器进入SYN-RCVD同步收到状态</li>\n</ul>\n</li>\n<li>客户机收到确认报文段还要向服务器给出确认<ul>\n<li>并为该TCP连接配置缓存和变量</li>\n<li>ACK&#x3D;1 seq&#x3D;x+1 ack&#x3D;y+1</li>\n<li>该报文段可携带数据</li>\n<li>不携带数据不消耗序号</li>\n<li>客户机进入ESTABLISHED</li>\n</ul>\n</li>\n<li>三次握手易受到SYN洪泛攻击</li>\n</ul>\n</li>\n<li>连接释放<ul>\n<li>四次握手</li>\n<li>客户机打算关闭连接 发送TCP连接释放报文段<ul>\n<li>主动关闭TCP连接</li>\n<li>FIN&#x3D;1 seq&#x3D;u</li>\n<li>seq为先前传输的最后一个序号+1</li>\n<li>客户进程进入FIN-WAIT-1终止等待1</li>\n</ul>\n</li>\n<li>服务器收到连接释放报文段<ul>\n<li>ack&#x3D;u+1 seq&#x3D;v</li>\n<li>序号等于前面传过的数据最后一个字节的序号+1</li>\n<li>服务器CLOSE-WAIT关闭等待</li>\n<li>客户机到服务器方向连接关闭</li>\n<li>服务器到客户机方向连接未关闭</li>\n<li>半关闭状态</li>\n<li>服务器若发送数据</li>\n<li>客户机仍要接收</li>\n</ul>\n</li>\n<li>服务器无数据发送至客户机 发送通知TCP释放连接报文段<ul>\n<li>FIN&#x3D;1 ACK&#x3D;1 seq&#x3D;w ack&#x3D;u+1</li>\n<li>设报文段的序号为w 在半关闭状态又传输部分数据</li>\n<li>需重复上次发送的确认号ack&#x3D;u+1</li>\n<li>服务器进入LAST-ACK最后确认状态</li>\n</ul>\n</li>\n<li>客户机收到连接释放报文段后 必须发出确认<ul>\n<li>ACK&#x3D;1 ack&#x3D;w+1 seq&#x3D;u+1</li>\n<li>此时TCP连接还未释放</li>\n<li>必须经过时间等待计时器设置的时间2MSL最长报文段寿命</li>\n<li>客户机进入CLOSED连接关闭状态</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>可靠传输<ul>\n<li>序号<ul>\n<li>序号保证数据能有序提交至应用层</li>\n<li>TCP视数据为无结构但有序的字节流</li>\n<li>序号建立在传输的字节流</li>\n<li>序号字段值是指本报文段所发送的数据的第一个字节的序号</li>\n</ul>\n</li>\n<li>确认<ul>\n<li>期望收到对方的下一个报文段的数据的第一个字节的序号</li>\n<li>默认使用累积确认<ul>\n<li>只确认数据流中至第一个丢失字节为止的字节</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>重传<ul>\n<li>只针对两种情况进行重传<ul>\n<li>超时</li>\n<li>冗余ACK</li>\n</ul>\n</li>\n<li>超时<ul>\n<li>TCP发送一个报文段就对这个报文段设置一次计时器</li>\n<li>超时未收到确认就要重传这一报文段</li>\n<li>采用自适应算法记录一个报文段发出的时间和收到确认的时间<ul>\n<li>${RTT}_S$加权平均往返时间</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>冗余ACK<ul>\n<li>超时触发重传存在的一个问题是周期往往太长</li>\n<li>是再次确认某个报文段的ACK 而发送方先前已经收到过该报文段的确认</li>\n<li>发送方收到对同一个报文段的3个冗余ACK 就可以认为跟在这个被确认报文段之后的报文段已经丢失</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>流量传输<ul>\n<li>使用流量控制消除发送方速率过快使接收方缓存区溢出的可能性</li>\n<li>基于滑动窗口协议的流量控制机制</li>\n<li>rwnd<ul>\n<li>接收方根据自己的接收缓存 动态调整发送方的发送窗口大小</li>\n</ul>\n</li>\n<li>cwnd<ul>\n<li>发送方根据其对当前网络拥塞程度的估计而确定的窗口值</li>\n</ul>\n</li>\n<li>发送窗口&#x3D;min{rwnd, cwnd}</li>\n</ul>\n</li>\n<li>拥塞控制<ul>\n<li>防止过多数据注入网络 保证网络中的路由器或链路不致过载</li>\n<li>慢开始<ul>\n<li>TCP连接好并开始发送报文段 cwnd&#x3D;1 即一个最大报文段长度MSS</li>\n<li>每收到一个对新报文段的确认后 cwnd+1</li>\n<li>使用慢开始算法后 每经过一个传输轮次RTT cwnd加倍 指数增长</li>\n<li>一直增长到一个规定的慢开始门限值ssthresh</li>\n</ul>\n</li>\n<li>拥塞避免<ul>\n<li>让拥塞窗口cwnd缓慢增大</li>\n<li>每经过一个往返时延RTT就把发送方的拥塞窗口cwnd+1 加法增大</li>\n<li>根据cwnd大小选择算法<ul>\n<li>cwnd &lt; ssthresh<ul>\n<li>慢开始</li>\n</ul>\n</li>\n<li>cwnd &gt; ssthresh<ul>\n<li>拥塞避免算法</li>\n</ul>\n</li>\n<li>cwnd &#x3D; ssthresh<ul>\n<li>均可</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>拥塞处理<ul>\n<li>初始<ul>\n<li>拥塞窗口置1 cwnd&#x3D;1 慢开始门限ssthresh&#x3D;16</li>\n</ul>\n</li>\n<li>慢开始<ul>\n<li>cwnd&#x3D;1 发送方每收到一个确认ACK cwnd+1</li>\n<li>经过每个RTT cwnd指数增长</li>\n<li>达到门限值ssthresh 使用拥塞避免算法</li>\n</ul>\n</li>\n<li>拥塞避免<ul>\n<li>假定cwnd&#x3D;24出现超时 更新ssthresh&#x3D;12 cwnd&#x3D;1 执行慢开始</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>快重传<ul>\n<li>当发送方连续收到三个重复的ACK报文</li>\n<li>直接重传对方未收到的报文段</li>\n<li>不必等待那个报文段设置的重传计算器超时</li>\n</ul>\n</li>\n<li>快恢复<ul>\n<li>发生黄连续收到三个冗余ACK</li>\n<li>乘法减小</li>\n<li>将慢开始门限ssthresh设置为此时发送方cwnd的一半</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","categories":[],"tags":[]}