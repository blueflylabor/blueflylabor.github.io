{"title":"计算机组成原理·指令系统","slug":"计算机组成原理·指令系统","date":"2021-04-06T04:01:51.000Z","updated":"2024-06-30T07:40:05.389Z","comments":false,"path":"api/articles/计算机组成原理·指令系统.json","photos":[],"excerpt":"","covers":null,"content":"<h1 id=\"指令系统\"><a href=\"#指令系统\" class=\"headerlink\" title=\"指令系统\"></a>指令系统</h1><h2 id=\"指令系统-1\"><a href=\"#指令系统-1\" class=\"headerlink\" title=\"指令系统\"></a>指令系统</h2><p>是指令集体系结构ISA的核心<br>ISA主要包括：</p>\n<ul>\n<li>指令格式</li>\n<li>数据类型及格式</li>\n<li>操作数的存放方式</li>\n<li>程序可访问的寄存器个数、位数和编号 </li>\n<li>存储空间大小和编址方式</li>\n<li>寻址方式</li>\n<li>指令执行过程的控制方式等</li>\n</ul>\n<h3 id=\"指令的基本格式\"><a href=\"#指令的基本格式\" class=\"headerlink\" title=\"指令的基本格式\"></a>指令的基本格式</h3><p>一条指令包括操作码和地址码字段</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>操作码</td>\n<td>地址码</td>\n</tr>\n</tbody></table>\n<p>操作码:</p>\n<ul>\n<li>指出指令应执行的操作</li>\n<li>识别指令</li>\n<li>了解指令功能</li>\n<li>区分操作数地址内容的组成和使用方法</li>\n</ul>\n<p>地址码：</p>\n<ul>\n<li>给出被操作的信息的地址</li>\n<li>参加运算的一个或多个操作数所在的地址</li>\n<li>运算结果的保存地址</li>\n<li>程序的转移地址</li>\n<li>被调用的子程序的入口地址等</li>\n</ul>\n<p>指令长度是指一条指令中包含的二进制代码的位数<br>指令字长取决于</p>\n<ul>\n<li>操作码的长度</li>\n<li>操作数地址码的长度</li>\n<li>操作数地址个数</li>\n</ul>\n<p>单字长指令：等于机器字长<br>半字长指令：一半机器字长<br>双字长指令：二倍机器字长<br>定长指令字结构：一个指令系统所有指令的长度都是相等的  </p>\n<h4 id=\"零地址指令：无显示地址\"><a href=\"#零地址指令：无显示地址\" class=\"headerlink\" title=\"零地址指令：无显示地址\"></a>零地址指令：无显示地址</h4><table>\n<thead>\n<tr>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>OP</td>\n</tr>\n</tbody></table>\n<ul>\n<li>不需要操作数的指令</li>\n<li>零地址运算指令仅用于堆栈计算机，通常参与运算的两个操作数隐含的从栈顶和次栈顶弹出，送至运算器，运算结果再隐含的压入堆栈</li>\n</ul>\n<p>一地址指令：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>OP</td>\n<td>$A_1$</td>\n</tr>\n</tbody></table>\n<p>OP($A_1$) $\\to$ $A_1$</p>\n<ul>\n<li>只有目的操作数，按$A_1$地址读取操作数，进行OP操作后，结果存回原地址</li>\n</ul>\n<p>(ACC)OP($A_1$) $\\to$ ACC</p>\n<ul>\n<li>隐含约定目的地址的双操作数指令，按指令地址$A_1$地址读取操作数，指令可隐含约定另一个操作数由ACC提供，运算结果也将存放在ACC中</li>\n<li>若指令长度为32位，操作码占8位，1个地址码字段占24位，指令操作数直接寻址范围$2^{24}&#x3D;16M$</li>\n</ul>\n<h4 id=\"二地址指令\"><a href=\"#二地址指令\" class=\"headerlink\" title=\"二地址指令\"></a>二地址指令</h4><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>OP</td>\n<td>$A_1$</td>\n<td>$A_2$</td>\n</tr>\n</tbody></table>\n<p>($A_1$)OP($A_2$) $\\to$ $A_1$</p>\n<ul>\n<li>常用的算术和逻辑运算指令，需要两个操作数，需要分别给出目的操作数和源操作数，其中目的操作数地址还用于存放本次运算结果</li>\n<li>指令字长位32位，操作码占8位，两个地址码各占12位，则指令操作数的直接寻址范围$2^{12}&#x3D;4K$</li>\n</ul>\n<h4 id=\"三地址指令\"><a href=\"#三地址指令\" class=\"headerlink\" title=\"三地址指令\"></a>三地址指令</h4><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>OP</td>\n<td>$A_1$</td>\n<td>$A_2$</td>\n<td>$A_3$(结果)</td>\n</tr>\n</tbody></table>\n<p>($A_1$)OP($A_2$) $\\to$ $A_3$</p>\n<ul>\n<li>指令字长位32位，操作码占8位，3个地址码各占8位，直接寻址范围$2^8&#x3D;256$，地址字段为主存地址，则完成一条三地址需要4次访存，取指令1次，取两个操作数2次，存放结果1次</li>\n</ul>\n<h4 id=\"四地址指令\"><a href=\"#四地址指令\" class=\"headerlink\" title=\"四地址指令\"></a>四地址指令</h4><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>OP</td>\n<td>$A_1$</td>\n<td>$A_2$</td>\n<td>$A_3$</td>\n<td>$A_4$</td>\n</tr>\n</tbody></table>\n<p>($A_1$)OP($A_2$) $\\to$ $A_3$ ，$A_4$ &#x3D; 下一条执行指令的地址</p>\n<ul>\n<li>地址字长为32位，操作码占8位，4个地址码各占6位，直接寻址范围$2^6&#x3D;64$</li>\n</ul>\n<h3 id=\"定长操作码指令格式\"><a href=\"#定长操作码指令格式\" class=\"headerlink\" title=\"定长操作码指令格式\"></a>定长操作码指令格式</h3><p>在指令字的最高位部分分配固定的若干位（定长）表示操作码。<br>n位操作码字段的指令系统最大能表示$2^{n}$条指令</p>\n<h3 id=\"扩展操作码指令格式\"><a href=\"#扩展操作码指令格式\" class=\"headerlink\" title=\"扩展操作码指令格式\"></a>扩展操作码指令格式</h3><ul>\n<li>不允许短码是长码的前缀</li>\n<li>各指令的操作码一定不能重复</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0000</td>\n<td>0001</td>\n<td>0010</td>\n<td>0011</td>\n</tr>\n<tr>\n<td>0100</td>\n<td>0101</td>\n<td>0110</td>\n<td>0111</td>\n</tr>\n<tr>\n<td>1000</td>\n<td>1001</td>\n<td>1010</td>\n<td>1011</td>\n</tr>\n<tr>\n<td>1100</td>\n<td>1101</td>\n<td>1110</td>\n<td>1111</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>操作码情况</td>\n<td>OP</td>\n<td>$A_1$</td>\n<td>$A_2$</td>\n<td>$A_3$</td>\n<td>说明</td>\n</tr>\n<tr>\n<td>15条三地址</td>\n<td>0000-1110</td>\n<td></td>\n<td></td>\n<td></td>\n<td>余出16-15&#x3D;1，1*2^4&#x3D;16种</td>\n</tr>\n<tr>\n<td>12条二地址</td>\n<td>1111</td>\n<td>0000-1011</td>\n<td></td>\n<td></td>\n<td>余出16-12&#x3D;4，4*2^4&#x3D;64种</td>\n</tr>\n<tr>\n<td>62条一地址</td>\n<td>1111</td>\n<td>(1100-1110)&#x2F;1111</td>\n<td>(0000-1111)&#x2F;(0000-1101)</td>\n<td></td>\n<td>余出64-62&#x3D;2，2*2^4&#x3D;32种</td>\n</tr>\n<tr>\n<td>32条零地址</td>\n<td>1111</td>\n<td>1111</td>\n<td>1110-1111</td>\n<td>0000-1111</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"指令的操作类型\"><a href=\"#指令的操作类型\" class=\"headerlink\" title=\"指令的操作类型\"></a>指令的操作类型</h3><ul>\n<li>数据传送</li>\n<li>算术和逻辑运算</li>\n<li>移位</li>\n<li>转移</li>\n<li>输入输出</li>\n</ul>\n<h2 id=\"指令寻址方式\"><a href=\"#指令寻址方式\" class=\"headerlink\" title=\"指令寻址方式\"></a>指令寻址方式</h2><p>确定本条指令的数据地址以及下一条待执行指令的地址，分为：</p>\n<ul>\n<li><p>指令寻址：寻找下条要执行的指令<br>（1）顺序寻址<br>通过PC+(1)，自动形成下一条指令<br>（2）跳跃寻址<br>通过转移指令实现，下条指令的地址不由PC自动给出，而由本条指令给出下条指令地址的计算方式。是否可跳跃受到状态寄存器和操作数的控制，跳跃的结果是当前指令修改PC值，下一条指令仍通过PC给出</p>\n</li>\n<li><p>数据寻址：寻找本条指令的数据<br>通常在指令字中设一个字段指明寻址方式</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>操作码</td>\n<td>寻址特征</td>\n<td>形式地址A</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h3 id=\"常见数据寻址方式\"><a href=\"#常见数据寻址方式\" class=\"headerlink\" title=\"常见数据寻址方式\"></a>常见数据寻址方式</h3><h4 id=\"隐含寻址\"><a href=\"#隐含寻址\" class=\"headerlink\" title=\"隐含寻址\"></a>隐含寻址</h4><p>不明显的给出操作数，在指令中隐含操作数地址</p>\n<ul>\n<li>优：有利于缩短指令字长</li>\n<li>缺：需要增加存储操作数或隐含地址的硬件</li>\n</ul>\n<h4 id=\"立即（数）寻址\"><a href=\"#立即（数）寻址\" class=\"headerlink\" title=\"立即（数）寻址\"></a>立即（数）寻址</h4><p>指令的地址字段指出的不是操作数地址，而是操作数本身，又称立即数，#表示立即寻址特征，使用补码表示</p>\n<ul>\n<li>优：指令在执行阶段不访问主存，指令执行时间最短</li>\n<li>缺：A的位数限制立即数的范围</li>\n</ul>\n<h4 id=\"直接寻址\"><a href=\"#直接寻址\" class=\"headerlink\" title=\"直接寻址\"></a>直接寻址</h4><p>指令中的形式地址A是操作数的真实地址EA，EA&#x3D;A  </p>\n<ul>\n<li>优：简单，访存1次，不需要专门计算操作数的地址</li>\n<li>缺：A的位数决定了指令操作数的寻址范围，操作数的地址不易修改</li>\n</ul>\n<h4 id=\"间接寻址\"><a href=\"#间接寻址\" class=\"headerlink\" title=\"间接寻址\"></a>间接寻址</h4><p>指令的地址字段给出的形式地址不是操作数的真正地址，而是操作数有效地址的存储单元地址，EA&#x3D;(A)，间接寻址可以迭代多次<br>间接寻址，主存第一位表示是否为多次间址</p>\n<ul>\n<li>优：可扩大寻址范围（有效地址EA的位数大于形式地址A的位数），便于编制程序（用间址寻址可方便的完成子程序返回）</li>\n<li>缺：访问速度慢</li>\n</ul>\n<h4 id=\"寄存器寻址\"><a href=\"#寄存器寻址\" class=\"headerlink\" title=\"寄存器寻址\"></a>寄存器寻址</h4><p>指令字中直接给出操作数所在的寄存器编号EA&#x3D; $R_i$，操作数在由$R_i$所指的寄存器内</p>\n<ul>\n<li>优：指令执行阶段不访存，只访问寄存器，寄存器对应地址码长度较小，使得指令字短且因不用访存，所以执行速度快，支持向量&#x2F;矩阵运算</li>\n<li>缺:寄存器昂贵，有限</li>\n</ul>\n<h4 id=\"寄存器间接寻址\"><a href=\"#寄存器间接寻址\" class=\"headerlink\" title=\"寄存器间接寻址\"></a>寄存器间接寻址</h4><p>寄存器$R_i$中给出的不是一个操作数，而是操作数所在主存单元的地址EA&#x3D;($R_i$)</p>\n<ul>\n<li>优：与一般间址寻址速度快</li>\n<li>缺：需要访存</li>\n</ul>\n<h4 id=\"相对寻址\"><a href=\"#相对寻址\" class=\"headerlink\" title=\"相对寻址\"></a>相对寻址</h4><p>PC的内容加上指令格式的形式地址A而形成操作数的有效地址EA&#x3D;(PC)+A，A是相对于当前PC的值的位移量，可正可负，用补码表示，A的位数决定寻址范围</p>\n<ul>\n<li>操作数的地址是不固定的，随PC的值变化而变化，且与指令地址之间相差一个固定值，便于程序浮动，广泛用于转移指令</li>\n<li>JMP A，CPU从存储器取出一字节，自动执行(PC)+1 $\\to$ PC，若转移指令的地址为X，且占2B，取出该指令后，PC自增2，(PC)&#x3D;X+2，执行完该指令，会自动跳转至X+2+A的地址继续执行</li>\n</ul>\n<h4 id=\"基址寻址\"><a href=\"#基址寻址\" class=\"headerlink\" title=\"基址寻址\"></a>基址寻址</h4><p>将CPU的基址寄存器BR的内容加上指令格式的形式地址A形成操作数的有效地址EA&#x3D;(BR)+A，基址寄存器可采用专用寄存器也可为通用寄存器</p>\n<ul>\n<li><p>基址寄存器面向操作系统，内容通过操作系统或管理程序确定，主要用于解决程序逻辑空间与存储器物理空间的无关性</p>\n</li>\n<li><p>执行过程中基址寄存器内容不变，形式地址可变（偏移量）</p>\n</li>\n<li><p>采用通用寄存器作为基址寄存器，用户可决定使用哪个寄存器，内容由操作系统确定</p>\n</li>\n<li><p>优：可扩大寻址范围（基址寄存器位数大于形式地址A的位数），用户不必考虑自己的程序存于主存哪个区域，有利于多道程序设计，可用于制成浮动程序</p>\n</li>\n<li><p>缺：偏移量位数较短</p>\n</li>\n</ul>\n<h4 id=\"变址寻址\"><a href=\"#变址寻址\" class=\"headerlink\" title=\"变址寻址\"></a>变址寻址</h4><p>有效地址EA等于指令字中的形式地址A与变址寄存器IX的内容之和，EA&#x3D;(IX)+A</p>\n<ul>\n<li>IX可使用专用寄存器或通用寄存器</li>\n<li>变址寄存器面向用户，在程序执行过程，变址寄存器内容可由用户改变（作为偏移量），形式地址A不变（作为基地址）</li>\n<li>可扩大寻址范围（变址寄存器位数大于形式地址A的位数），适合编制循环程序，偏移量的位数（IX）足以表示整个存储空间</li>\n</ul>\n<h4 id=\"堆栈寻址\"><a href=\"#堆栈寻址\" class=\"headerlink\" title=\"堆栈寻址\"></a>堆栈寻址</h4><p>堆栈是存储器（或专用寄存器组）中一块特定的、按照后进先出（LIFO）的原则管理的存储区，存储区读写单元地址是用一个特定寄存器给出的称为堆栈指针(SP)，分为硬堆栈（不适合做大容量堆栈）和软堆栈（主存划出一段区域）</p>\n<table>\n<thead>\n<tr>\n<th>寻址方式</th>\n<th>有效地址</th>\n<th>访存次数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>隐含寻址</td>\n<td>程序指定</td>\n<td>0</td>\n</tr>\n<tr>\n<td>立即寻址</td>\n<td>A是操作数</td>\n<td>0</td>\n</tr>\n<tr>\n<td>直接寻址</td>\n<td>EA&#x3D;A</td>\n<td>1</td>\n</tr>\n<tr>\n<td>一次间接寻址</td>\n<td>EA&#x3D;(A)</td>\n<td>2</td>\n</tr>\n<tr>\n<td>寄存器寻址</td>\n<td>EA&#x3D; $R_i$</td>\n<td>0</td>\n</tr>\n<tr>\n<td>寄存器间接一次寻址</td>\n<td>EA &#x3D; ($R_i$)</td>\n<td>1</td>\n</tr>\n<tr>\n<td>相对寻址</td>\n<td>EA&#x3D;(PC)+A</td>\n<td>1</td>\n</tr>\n<tr>\n<td>基址寻址</td>\n<td>EA&#x3D;(BR)+A</td>\n<td>1</td>\n</tr>\n<tr>\n<td>变址寻址</td>\n<td>EA&#x3D;(IX)+A</td>\n<td>1</td>\n</tr>\n</tbody></table>\n","categories":[],"tags":[]}