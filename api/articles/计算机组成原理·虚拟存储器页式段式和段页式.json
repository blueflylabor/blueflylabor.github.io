{"title":"计算机组成原理·虚拟存储器页式段式和段页式","slug":"计算机组成原理·虚拟存储器页式段式和段页式","date":"2021-04-06T04:01:51.000Z","updated":"2024-06-30T07:40:05.407Z","comments":false,"path":"api/articles/计算机组成原理·虚拟存储器页式段式和段页式.json","photos":[],"excerpt":"","covers":null,"content":"<h1 id=\"虚拟存储器·页式·段式·段页式\"><a href=\"#虚拟存储器·页式·段式·段页式\" class=\"headerlink\" title=\"虚拟存储器·页式·段式·段页式\"></a>虚拟存储器·页式·段式·段页式</h1><p>主存和辅存共同构成了虚拟存储器，在硬件和系统软件的共同管理下工作。对于程序员而言，虚拟存储器是透明的，将主存和辅存的地址空间统一编址<br>用户编程允许涉及的地址称为虚地址或逻辑地址，虚拟地址对应的是存储空间称为虚拟空间<br>实际的主存单元地址称为实地址或物理地址，实地址对应的存储空间称为主存地址空间或实地址空间</p>\n<ul>\n<li>实地址 &#x3D; 主存页号 + 页内字地址</li>\n<li>虚地址 &#x3D; 虚存页号 + 页内字地址</li>\n<li>辅存地址 &#x3D; 磁盘号 + 盘面号 + 磁道号 + 扇区号</li>\n</ul>\n<p>CPU使用虚地址访存，由辅助硬件找出虚地址和实地址之间的对应关系，并判断这个虚地址对应的存储单元是否已装入内存</p>\n<ul>\n<li>在内存，通过地址变换，CPU可直接访问主存指示的数据单元</li>\n<li>不在内存，则把包含这个 字的一页或一段调入主存后，在通过虚实地址变换访问</li>\n</ul>\n<h2 id=\"页式虚拟存储器\"><a href=\"#页式虚拟存储器\" class=\"headerlink\" title=\"页式虚拟存储器\"></a>页式虚拟存储器</h2><p>以页为基本单位，虚拟空间与主存空间划分为同样大小的页，主存的页称为<strong>实页</strong>、<strong>页框</strong>，虚存的页称为<strong>虚页</strong>  </p>\n<h3 id=\"页表\"><a href=\"#页表\" class=\"headerlink\" title=\"页表\"></a>页表</h3><p>页表是一张存储在主存中的虚页号和实页号对照表，记录程序的虚页调入主存时被安排在主存中的位置，页表一般长期存在于主存内</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>有效位</td>\n<td>脏位</td>\n<td>引用位</td>\n<td>物理页</td>\n</tr>\n</tbody></table>\n<ul>\n<li>有效位（装入位）：表示对应页是否在主存</li>\n<li>脏位（修改位）：表示页面是否被修改过，配合回写策略，判断是否需要写回磁盘</li>\n<li>引用位（使用位）：配合替换算法进行设置</li>\n</ul>\n<p>CPU运行指令时，虚地址转实地址：</p>\n<ul>\n<li>页表基址寄存器存放进程的页表首地址</li>\n<li>根据虚拟地址高位部分的虚拟页号找到相应的页表项</li>\n<li>装入位为1，则取出物理页号和虚拟地址地位进行拼接，形成实际物理地址</li>\n<li>装入位为0，说明缺页，需要操作系统进行缺页处理</li>\n</ul>\n<h3 id=\"快表-TLB\"><a href=\"#快表-TLB\" class=\"headerlink\" title=\"快表(TLB)\"></a>快表(TLB)</h3><p>高速缓存器制成，依据程序的局部性原理，内存中的页表称之为慢表，地址转换时，先查快表，命中无需访问主存中的页表<br>快表通常采用组相联或全相联方式</p>\n<table>\n<thead>\n<tr>\n<th>t</th>\n<th>r</th>\n<th>p</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>标记</td>\n<td>有效位</td>\n<td>实页号</td>\n</tr>\n</tbody></table>\n<h3 id=\"具有TLB和Cache的多级存储系统\"><a href=\"#具有TLB和Cache的多级存储系统\" class=\"headerlink\" title=\"具有TLB和Cache的多级存储系统\"></a>具有TLB和Cache的多级存储系统</h3><p>三种缺失的情况  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>TLB</th>\n<th>Page</th>\n<th>Cache</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>命中</td>\n<td>命中</td>\n<td>命中</td>\n<td>TLB命中则Page一定命中，信息在主存，就可能在Cache</td>\n</tr>\n<tr>\n<td>2</td>\n<td>命中</td>\n<td>命中</td>\n<td>缺失</td>\n<td>TLB命中则Page一定命中，信息在主存，也可能不在Cache</td>\n</tr>\n<tr>\n<td>3</td>\n<td>缺失</td>\n<td>命中</td>\n<td>命中</td>\n<td>TLB缺失但Page可能命中，信息在主存，就可能在Cache</td>\n</tr>\n<tr>\n<td>4</td>\n<td>缺失</td>\n<td>命中</td>\n<td>缺失</td>\n<td>TLB缺失但Page一定命中，信息在主存，也可能不在Cache</td>\n</tr>\n<tr>\n<td>5</td>\n<td>缺失</td>\n<td>缺失</td>\n<td>缺失</td>\n<td>TLB缺失则Page也可能缺失，信息不在主存，也一定不在Cache</td>\n</tr>\n</tbody></table>\n<h2 id=\"段式虚拟存储器\"><a href=\"#段式虚拟存储器\" class=\"headerlink\" title=\"段式虚拟存储器\"></a>段式虚拟存储器</h2><p>按照程序的逻辑结构划分，将逻辑地址分为段号和段内地址，虚实地址转换是由段表来是实现的，段表是程序的逻辑段和在主存中存放位置的对照表</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>段号</td>\n<td>段首地址</td>\n<td>装入位</td>\n<td>段长</td>\n</tr>\n</tbody></table>\n<p>CPU访存时：</p>\n<ul>\n<li>根据段号与段表基地址拼接成对应的段表行</li>\n<li>根据段表行的装入位判断是否调入内存</li>\n<li>调入内存，则从段表读出该段在主存的起始地址，与段内地址相加，得到对应的主存实地址</li>\n</ul>\n<h2 id=\"段页式虚拟存储器\"><a href=\"#段页式虚拟存储器\" class=\"headerlink\" title=\"段页式虚拟存储器\"></a>段页式虚拟存储器</h2><p>根据程序的逻辑结构，将每段划分为固定的大小页，主存空间也划分为大小相等的页，程序对主存调入、调出仍以页为基本传送单位<br>每个程序对应一个段表，每个段表对应一个页表，段的长度必须是页长的整数倍  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>段号</td>\n<td>段内页号</td>\n<td>页内地址</td>\n</tr>\n</tbody></table>\n<p>CPU访存：</p>\n<ul>\n<li>根据段号得到段表地址</li>\n<li>从段表中取出该段的页表起始地址，与虚地址段页号合成，得到页表地址</li>\n<li>从页表中取出实页号，与页内地址拼接形成实地址</li>\n</ul>\n<h2 id=\"虚拟存储器与Cache的比较\"><a href=\"#虚拟存储器与Cache的比较\" class=\"headerlink\" title=\"虚拟存储器与Cache的比较\"></a>虚拟存储器与Cache的比较</h2><table>\n<thead>\n<tr>\n<th>相同</th>\n<th>不同</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>目的均为提供系统性能</td>\n<td>Cache主要解决系统速度，虚拟存储器解决主存容量</td>\n</tr>\n<tr>\n<td>均把数据划分为小的信息块作为基本传递单位，虚存系统的信息块更大</td>\n<td>Cache由硬件实现，对程序员透明，虚拟存储器由OS和硬件实现，是逻辑上的存储器，对系统程序员不透明，对应用程序员透明</td>\n</tr>\n<tr>\n<td>都有地址的映射、替换算法、更新策略</td>\n<td></td>\n</tr>\n<tr>\n<td>均依据程序的局部性原理</td>\n<td></td>\n</tr>\n</tbody></table>\n","categories":[],"tags":[]}